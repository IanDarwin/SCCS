.TH SCCS 1
.SH  NAME
sccs \- how to use the Source Code Control System
.SH DESCRIPTION
The Source Code Control System (SCCS)
is a package of programs used to keep track of the various versions of
a text file.
It is most often used to control changes in program code, but can be used
on any ASCII text file.
.PP
SCCS consists of the programs admin(1), get(1), delta(1), prt(1), what(1),
and sccsdiff(1).
.PP
For each file placed under the control of the SCCS, a file called an s-file
is created.
The name of the s-file is created by pre-pending the characters "s." to
the name of the original plaintext file.
For example, if the file we want to keep track of is called "alice", then
the s-file will be called "s.alice".
The s-file is always created with modes 0444 (see creat(2)).
This prevents most programs from attempting to modify the file.
Only programs in the SCCS should be used to modify the s-file.
.PP
Suppose that we have a file called alice that we want to use the SCCS on.
Alice contains the following text:
.sp
.RS +5
.nf
main()
	{
	printf("Alice fell down the groundhog hole,\\n");
	printf("and went to the bottom.\\n");
	}
.fi
.RE
.PP
To create an s-file for alice, use the admin command:
.sp
.ti +5
admin -ialice s.alice
.PP
Since we now have the information in alice recorded in the SCCS file s.alice,
we can remove alice:
.sp
.ti +5
rm alice
.PP
To get alice back, use the get command:
.sp
.ti +5
get s.alice
.PP
The get command will print the following information:
.sp
.in +5
.nf
1.1
5 lines
.fi
.in -5
.PP
This tells us that the version of alice we have retrieved is known as version 1.1,
and that it contains 5 lines.
.PP
The alice file that get created can be compiled, printed, searched and otherwise
used quite normally, but can not be edited.
In order make a change to alice, use the get command again:
.sp
.ti +5
get -e s.alice
.PP
This will tell the SCCS that you are about to change alice.
You can now go ahead and edit alice, making changes to it.
Suppose we change alice to look like this:
.sp
.in +5
.nf
main()
	{
	printf("Alice fell down the rabbit hole,\\n");
	printf("and went to the bottom.\\n");
	printf("She went along a tunnel,\\n");
	printf("until she came to a door.\\n");
	}
.fi
.in -5
.PP
Now we use the delta command to record the changes:
.sp
.ti +5
delta s.alice
.PP
Delta will ask for "comments ?".
Type in a one or two line comment explaining the changes you made:
.in +5
.sp
.nf
comments ?Decided that a rabbit hole would be better.\\
Continued story from bottom of hole.
.fi
.in -5
.PP
Notice that if you want to continue the comments over more than one line,
you must end each line but the last with a '\\' character.
Delta will then print:
.sp
.in +5
.nf
1.2
3 inserted
1 deleted
4 unchanged
.fi
.in -5
.PP
This tells us that the new version of alice has been named 1.2, and that
we added 3 lines, deleted 1 and left 4 unchanged.
.PP
Now if we say "get s.alice", we get the following:
.sp
.in +5
.nf
1.2
7 lines
.fi
.in -5
.PP
The get command will always give the most recent version by default.
If we want a specific version, we can type:
.sp
.ti +5
get -r1.1 s.alice
.PP
which will give us the original version 1.1 file.
.PP
The s-file has some useful information stored away in it.
To find out about a specific SCCS file, use the prt command:
.ti +5
.sp
prt s.alice
.PP
which will print:
.nf

s.alice:

D 1.2	82/11/23 16:11:13	drg	2	1	00003/00001/00004
Decided that a rabbit hole would be better.
Continued story from bottom of hole.

D 1.1	82/11/23 16:07:49	drg	1	0	00005/00000/00000

.fi
.PP
Prt tells us the date and time of each delta, the name of the programmer who
made it, the reason he gave for the change, and the number of lines he added,
deleted and left unchanged.
.PP
By looking at the alice file, it is impossible to tell which version of alice
it is.
The SCCS provides a facility for placing identification information into
alice automatically.
If we put special keywords called "SCCS identification keywords" into our
file, the SCCS will automatically replace them with strings identifying
the file whenever we "get" a non-writable copy of the file.
For example, if we get a writable copy of alice back:
.sp
.in +5
.nf
get -e s.alice
1.2
7 lines
.in -5
.fi
.PP
and make the following change:
.sp
.in +5
.nf
static char myname[] = "%W% of %G%";

main()
	{
	printf("Alice fell down the rabbit hole,\\n");
	printf("and went to the bottom.\\n");
	printf("She went along a tunnel,\\n");
	printf("until she came to a door.\\n");
	}
.fi
.in -5
.PP
then store the change by doing a delta:
.sp
.in +5
.nf
delta s.alice
comments? Added an SCCS identification string.
1.3
2 inserted
0 deleted
7 unchanged
.fi
.in -5
.PP
If we now extract the new version of alice:
.sp
.in +5
.nf
get s.alice
1.3
9 lines
.fi
.in -5
.PP
then alice looks like this:
.sp
.in +5
.nf
static char myname[] = "@(#)alice	1.3 of 11/23/82";

main()
	{
	printf("Alice fell down the rabbit hole,\\n");
	printf("and went to the bottom.\\n");
	printf("She went along a tunnel,\\n");
	printf("until she came to a door.\\n");
	}
.fi
.in -5
.PP
The SCCS keywords %W% and %G% were replaced by the strings "@(#)alice\ \ \ 1.3"
and "11/23/82" respectively.
There are a large number of possible SCCS keywords.
Look in the get(1) command manual for a complete list.
.PP
The what command will search for the pattern "@(#)"
in a file, and can be used to look for SCCS identifiers.
If we managed to compile the current version of alice to produce a binary file
called "a.out", then the command:
.sp
.in +5
.nf
what alice
.fi
.in -5
.sp
will produce the output:
.sp
.in +5
.nf
alice:
	alice	1.3 of 11/23/82
.fi
.in -5
.PP
and the command:
.sp
.in +5
.nf
what a.out
.fi
.in -5
.sp
will produce the output:
.sp
.in +5
.nf
a.out:
	alice	1.3 of 11/23/82
.fi
.in -5
.PP
In this way, we can instantly tell which version of the alice source file
was used to create the file "a.out".
.SH "SEE ALSO"
admin(1), get(1), delta(1), what(1), prt(1), sccsdiff(1)
.SH AUTHOR
This package of programs was written by David R. Galloway.
It is a re-implementation of the original Source
Code Control System (SCCS)
which was written at Bell Labs.
.SH BUGS
A number of features of the original Bell Labs SCCS were left out of
this implementation.
A partial list includes:
checksums; branch deltas; flags; MR's; the %Y% keyword;
the comb, rmdel, chghist and help commands;
access control lists; cutoff dates; ignored and excluded deltas, and
floor and ceiling version numbers.
